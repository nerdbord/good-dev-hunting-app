// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String         @id @default(uuid())
  avatarUrl     String?
  email         String         @unique
  profile       Profile? //user have profile //relations  
  githubDetails GitHubDetails? //user have gitHub //relations
  roles         Role[]         @default([USER])
  nerdbordUserId String?          @unique
}

model Profile {
  id                        String            @id @default(uuid())
  user                      User              @relation(fields: [userId], references: [id])
  userId                    String            @unique
  fullName                  String
  linkedIn                  String?
  bio                       String
  country                   Country           @relation(fields: [countryId], references: [id])
  countryId                 String
  openForCountryRelocation  Boolean           @default(false)
  city                      City              @relation(fields: [cityId], references: [id])
  cityId                    String
  openForCityRelocation     Boolean           @default(false)
  remoteOnly                Boolean
  position                  String
  seniority                 String
  techStack                 TechnologyOnProfile[]
  employmentType            EmploymentType
  state                     PublishingState   @default(DRAFT)
  rejectionReasons          RejectionReason[]
}

model Technology {
  id          String                 @id @default(uuid())
  name        String
  profiles    TechnologyOnProfile[]
}

model TechnologyOnProfile {
  techStackId String        @id @unique
  profileId   String        @unique
  technology  Technology    @relation(fields: [techStackId], references: [id])
  profile     Profile       @relation(fields: [profileId], references: [id])
}

model GitHubDetails {
  id       String @id @default(uuid())
  username String @unique
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
}

model Country {
  id                String    @id @unique @default(uuid())
  name              String    @unique
  profile           Profile[]
}

model City {
  id                String    @id @default(uuid())
  name              String    @unique
  profile           Profile[]
}

model RejectionReason {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String  
  reason    String  
  createdAt DateTime @default(now())
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum Role {
  USER
  MODERATOR
}

enum PublishingState {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}
