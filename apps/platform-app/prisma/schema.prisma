generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  avatarUrl            String?
  roles                Role[]           @default([USER])
  nerdbordUserId       String?          @unique
  emailVerified        DateTime?
  createdAt            DateTime         @default(now())
  preferredLanguage    String?
  accounts             Account[]
  sentApplications     Application[]    @relation("applicant")
  receivedApplications Application[]    @relation("jobOwner")
  contactRequests      ContactRequest[]
  githubDetails        GitHubDetails?
  createdJobs          Job[]
  messages             Message[]
  profile              Profile?
  viewedProfiles       ProfileView[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id                       String            @id @default(uuid())
  userId                   String            @unique
  fullName                 String
  linkedIn                 String?
  bio                      String
  countryId                String
  cityId                   String
  remoteOnly               Boolean
  position                 String
  seniority                String
  state                    PublishingState   @default(DRAFT)
  openForCityRelocation    Boolean           @default(false)
  openForCountryRelocation Boolean           @default(false)
  employmentTypes          EmploymentType[]
  isOpenForWork            Boolean           @default(true)
  viewCount                Int               @default(0)
  currency                 Currency          @default(PLN)
  hourlyRateMax            Int               @default(0)
  hourlyRateMin            Int               @default(0)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime?         @updatedAt
  slug                     String            @unique
  cvUrl                    String?
  contactRequests          ContactRequest[]
  jobMatches               JobCandidate[]
  city                     City              @relation(fields: [cityId], references: [id])
  country                  Country           @relation(fields: [countryId], references: [id])
  user                     User              @relation(fields: [userId], references: [id])
  profileViews             ProfileView[]
  rejectionReasons         RejectionReason[]
  language                 Language[]        @relation("LanguageToProfile")
  techStack                Technology[]      @relation("ProfileToTechnology")
}

model Technology {
  id       String    @id @default(uuid())
  name     String    @unique
  jobId    String?
  Job      Job?      @relation(fields: [jobId], references: [id])
  profiles Profile[] @relation("ProfileToTechnology")
}

model GitHubDetails {
  id       String @id @default(uuid())
  username String @unique
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
}

model Country {
  id      String    @id @unique @default(uuid())
  name    String    @unique
  profile Profile[]
}

model City {
  id      String    @id @default(uuid())
  name    String    @unique
  profile Profile[]
}

model RejectionReason {
  id        String   @id @default(uuid())
  profileId String
  reason    String
  createdAt DateTime @default(now())
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model ContactRequest {
  id             String   @id @default(uuid())
  subject        String
  message        String
  senderFullName String
  senderEmail    String
  profileId      String
  createdAt      DateTime @default(now())
  senderId       String?
  profile        Profile  @relation(fields: [profileId], references: [id])
  sender         User?    @relation(fields: [senderId], references: [id])
}

model ProfileView {
  id              String   @id @default(uuid())
  viewerId        String
  viewedProfileId String
  createdAt       DateTime @default(now())
  viewedProfile   Profile  @relation(fields: [viewedProfileId], references: [id])
  viewer          User     @relation(fields: [viewerId], references: [id])
}

model Language {
  id       String    @id @default(uuid())
  name     String    @unique
  profiles Profile[] @relation("LanguageToProfile")
}

model Job {
  id                             String          @id @default(uuid())
  jobName                        String
  projectBrief                   String
  budgetType                     String
  currency                       Currency?
  minBudgetForProjectRealisation Int?
  maxBudgetForProjectRealisation Int?
  contractType                   String
  employmentTypes                String[]
  employmentModes                String[]
  country                        String
  city                           String
  remoteOnly                     Boolean         @default(false)
  state                          PublishingState @default(DRAFT)
  createdById                    String?
  createdAt                      DateTime        @default(now())
  updatedAt                      DateTime?       @updatedAt
  viewCount                      Int             @default(0)
  terms                          Boolean         @default(true)
  applications                   Application[]
  createdBy                      User?           @relation(fields: [createdById], references: [id])
  matchedCandidates              JobCandidate[]
  techStack                      Technology[]
}

model Application {
  id          String    @id @default(uuid())
  jobId       String
  applicantId String
  jobOwnerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  applicant   User      @relation("applicant", fields: [applicantId], references: [id])
  job         Job       @relation(fields: [jobId], references: [id])
  jobOwner    User      @relation("jobOwner", fields: [jobOwnerId], references: [id])
  messages    Message[]
}

model Message {
  id            String      @id @default(uuid())
  content       String
  sentAt        DateTime    @default(now())
  applicationId String
  senderId      String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  sender        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model RateLimit {
  id        String   @id @default(uuid())
  ipAddress String
  action    String
  timestamp DateTime @default(now())
  userId    String?
  metadata  String?

  @@index([ipAddress, action])
  @@index([timestamp])
}

model JobCandidate {
  id                         String   @id @default(uuid())
  jobId                      String
  profileId                  String
  matchScore                 Int
  technicalSkillsScore       Int
  experienceLevelScore       Int
  employmentPreferencesScore Int
  additionalFactorsScore     Int
  matchReason                String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  job                        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  profile                    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([jobId, profileId])
  @@index([jobId])
  @@index([profileId])
  @@index([matchScore])
}

enum Currency {
  PLN
  EUR
  USD
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum Role {
  USER
  MODERATOR
  TEAM
  SPECIALIST
  HUNTER
}

enum PublishingState {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}
